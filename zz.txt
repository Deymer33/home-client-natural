Estoy retomando el proyecto ‚Äúhome-client-natural‚Äù en Next.js 14 con TypeScript, Tailwind y Prisma (SQLite).
Ya tengo la conexi√≥n con Prisma funcionando correctamente, con el siguiente esquema:

model Store {
  id        Int       @id @default(autoincrement())
  name      String
  code      String     @unique
  products  ProductStore[]
  bookings  Booking[]
  createdAt DateTime   @default(now())
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  basePrice   Float
  imageUrl    String?
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  stores      ProductStore[]
}

model ProductStore {
  id        Int       @id @default(autoincrement())
  store     Store     @relation(fields: [storeId], references: [id])
  storeId   Int
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  price     Float?
  active    Boolean   @default(true)
}

model Booking {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  service    String
  date       DateTime
  message    String?
  paid       Boolean  @default(false)
  paymentId  String?
  createdAt  DateTime @default(now())
  store      Store    @relation(fields: [storeId], references: [id])
  storeId    Int
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
Tambi√©n tengo:

/api/bookings funcionando con POST y GET.

Sistema de autenticaci√≥n configurado con NextAuth (credentials provider).

Un usuario admin seed:
email: admin@example.com
password: 123456
Ruta /admin/login creada con formulario funcional de inicio de sesi√≥n.

Lo que quiero continuar ahora:

üëâ Crear el panel de administraci√≥n /admin:

Que est√© protegido (solo accesible si el usuario admin est√° logueado).

Mostrar las citas (bookings) con sus datos.

Permitir filtrar por tienda (M√©xico / USA).

Opci√≥n de marcar una cita como atendida o cancelada (estado opcional).

Un dise√±o limpio usando los componentes UI existentes (Button, Table, Badge, etc).

El objetivo de hoy es construir el dashboard principal y proteger las rutas.

Ejecutar servidor local	npm run dev
Generar Prisma Client	npx prisma generate
Aplicar migraciones	npx prisma migrate dev
Resetear base de datos (borrar todo y re-crear)	npx prisma migrate reset
Correr seed manualmente	npx prisma db seed
Abrir interfaz visual de Prisma Studio	npx prisma studio
Si ves un error tipo ‚Äútabla no existe‚Äù o ‚Äúschema mismatch‚Äù, ejecuta: npx prisma migrate reset
npx prisma db seed

Objetivo cuando retomemos:

Crear layout /admin protegido por sesi√≥n.

Crear tabla de citas (BookingsTable) conectada al backend.

A√±adir filtrado por tienda.

(Opcional) A√±adir acciones de estado (Atendida / Cancelada)